%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%The complex symmetric linear systems of equations is  
%                 (W+iT)x = b
%     W =K+[(3-sqrt(3))/tau]I         T =K+[(3+sqrt(3))/tau]I
%          I(单位阵)                 K=I\kron Vm + Vm\kron I
%     Vm = (h^-2)*[tridiag(-1,2,-1)]   h=1/m        
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  A = (W+iT)x = [(alphaI+W)-(alphaI-iT)]x = b  (1)
%  -iA = (T-iW) = [(alphaI+T)-(alphaI+iW)]x = -ib (2)
% 根据(1) 和 （2）构造了迭代格式
% (alphaI+W)x^(k+0.5) = (alphaI-iT)x^(k)+b
% (alphaI+T)x^(k+1) = 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%MHSS方法的参数选取列表
%m          8         16       32      48        64      80     128      256      512
%alpha     1.66      1.06     0.75    0.66      0.54    0.51   0.40      0.30     0.21
%IT         30        40       54      64        73      80     98       133       181
%RES      6.5749    9.6723   9.6109   8.5006   9.4109  8.8040  9.3469   9.9918    9.7394
%Cpu(s)   0.0016    0.0065   0.0444   0.1791   0.4998  1.0952  5.4905   54.5122  544.3006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%从一个6x6矩阵中，提取它的第一行元素形成一个6维行向量。A(i,:)行 ,A(:,j)列方法。
%A(i,:)提取A的第i行
%A(:,j)提取A的第j列
clear;                                      %清除上次所生成的内存中的东西
clc;                                        %清屏
m=input('please input  m=');                %输入m的值=8,16,32,64,128,256
alpha=input('please input  alpha=');        %输入参数alpha的值
h=1/(m+1);                                      %网格步长
n=m*m;                                      %生成的矩阵维数
V=diag(-1*ones(m-1,1),1)+2*speye(m)+diag(-1*ones(m-1,1),-1);%三对角矩阵(-1,2,-1)
Vm=(1/(h*h))*V;                             
K=kron(speye(m),Vm)+kron(Vm,speye(m));

W=K+((3-sqrt(3))/h)*speye(n);
W=h*h*W;
T=K+((3+sqrt(3))/h)*speye(n);
T=h*h*T;

c=sparse(n,1);
for k=1:n
    c(k)=k/(h*(k+1)*(k+1));   
end

p=h*h*c;
q=-h*h*c;

b = p+1i*q;


disp('LU分解：')
tic;
[IT,res]=LU(W,T,n,alpha,b);
toc;
IT
res

disp('PCPLU分解：')
tic;
[ITCPC,resCPC]=PCPLU(W,T,n,alpha,b);
toc;
ITCPC
resCPC

disp('重排的Pcholesky分解：')
tic;
[ITchol,reschol]=cpcholesky(W,T,n,alpha,b);
toc;
ITchol
reschol

% A = W+1i*T;
% b = p+1i*q;
% tol = 1e-6;
% disp('matlab preconditioned GMRES')
% tic;
% M = (alpha*speye(n)+W)*(alpha*speye(n)+T);
% gmres(A,b,20,tol,250,M);  
% toc;
